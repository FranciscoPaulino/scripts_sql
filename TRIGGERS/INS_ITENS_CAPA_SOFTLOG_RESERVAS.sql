USE [DRLINGERIE]
GO

/****** Object:  Trigger [dbo].[INS_ITENS_CAPA_SOFTLOG_RESERVAS]    Script Date: 03/08/2016 08:20:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[INS_ITENS_CAPA_SOFTLOG_RESERVAS] ON [dbo].[VENDAS_PROD_EMBALADO]
FOR INSERT 
AS
BEGIN 
	SET NOCOUNT ON;
	--Variáveis do pedido;
	DECLARE @ISN_PED INT, @ISN_PRO INT, @TAMPROD VARCHAR(60), @ISN_CLI INT, @PEDOBS VARCHAR(MAX);
	--Variáveis da reserva;
	DECLARE @ISN_RES INT;
	--Variáveis do insert
	DECLARE @RESERVA VARCHAR(20),@COR_PROD VARCHAR(60), @COD_PROD VARCHAR(60), @PEDIDO VARCHAR(20);	
	
	--Variávei da tabela de integração
	DECLARE @TAMCLN VARCHAR(20), @QTD INT;
	
	SELECT @COR_PROD = INS.COR_PRODUTO, @COD_PROD = INS.PRODUTO, @RESERVA = LTRIM(RTRIM(INS.ROMANEIO)),
	@PEDIDO = LTRIM(RTRIM(INS.PEDIDO))
	FROM INSERTED INS;
	
	--Curso para percorre os itens
	DECLARE cINTEGRACAO CURSOR
	FAST_FORWARD
	FOR 
	--Seleciona os itens da nota de entrada.
	SELECT I.TAMANHO, I.QTD FROM WMS_INTEGRACAO_EXP_RESERVAS I
		WHERE I.RESERVA = @RESERVA AND I.PRODUTO = @COD_PROD AND I.COR_PRODUTO = @COR_PROD; 
	--Abre o cursor
	OPEN cINTEGRACAO;
	--Define os valores da primeira interação
	FETCH NEXT FROM cINTEGRACAO INTO @TAMCLN, @QTD
	--
	WHILE @@FETCH_STATUS = 0
	BEGIN
		--Verifica se a nota fiscal já existe na base de dados
		IF NOT EXISTS(SELECT P.ISN_PEDIDO FROM WMS_PEDIDO P 
			WHERE P.PEDCN_PEDIDO = @PEDIDO)
		BEGIN
			SELECT @ISN_CLI = C.ISN_CLIENTE, @PEDOBS = V.OBS FROM CADASTRO_CLI_FOR C
			JOIN VENDAS V ON (V.CLIENTE_ATACADO = C.NOME_CLIFOR);
			
			INSERT INTO WMS_PEDIDO(PEDCN_PEDIDO, PEDDT_PEDIDO, ISN_CLIENTE) 
			VALUES (@PEDIDO,GETDATE(), @ISN_CLI);
		END
		--RECUPERA O ID DO PEDIDO
		SELECT @ISN_PED = ISN_PEDIDO FROM WMS_PEDIDO
		WHERE PEDCN_PEDIDO = @PEDIDO;
		
		IF NOT EXISTS(SELECT RP.ISN_RESERVA_PEDIDO FROM WMS_RESERVAS_PEDIDO RP 			
			WHERE RP.REPCN_RESERVA = @RESERVA AND RP.ISN_PEDIDO = @ISN_PED)
		BEGIN
			INSERT INTO WMS_RESERVAS_PEDIDO(ISN_PEDIDO, REPCN_RESERVA, REPFG_STATUS_RESERVA) 
			VALUES (@ISN_PED,@RESERVA, 'Pendente');
		END		
		--Recupera o id da reserva
		SELECT @ISN_RES = RP.ISN_RESERVA_PEDIDO FROM WMS_RESERVAS_PEDIDO RP
		WHERE REPCN_RESERVA = @RESERVA AND ISN_PEDIDO = @ISN_PED;		
		
		--Construção dinamica do select
		DECLARE @sql NVARCHAR(MAX), @params NVARCHAR(MAX), @tamanho varchar(50);
		--Define a clausula para a consulta dinamica.
		set @sql = N'SELECT @tamOUT = '+ @TAMCLN +' FROM PRODUTOS LP
		JOIN PRODUTOS_TAMANHOS LT ON (LP.GRADE = LT.GRADE)
		WHERE LP.PRODUTO = @codprod'
		--Define os parametros do sql dinamico
		set @params = N'@tamOUT varchar(15) output, @codprod varchar(50)';
		--Executa o sql feito dinamicamente
		EXECUTE SP_EXECUTESQL @sql, @params, @tamOUT = @tamanho output, @codprod = @COD_PROD; 			
		--Recupera o isn do produto baseado na cor, tamanho e codigo do produto.
		SELECT @ISN_PRO = P.ISN_PRODUTO FROM WMS_PRODUTO P
		JOIN WMS_CORES C ON (P.PRONR_COR = C.ISN_COR)
		WHERE P.PRODS_TAM = @tamanho and C.CORNR_COR = @COR_PROD and p.PROCC_PRODUTO = @COD_PROD;
		--insere os itens da nota de entrada.		
		IF NOT EXISTS(SELECT IRP.ISN_RESERVA_PEDIDO FROM WMS_ITEM_RESERVAS_PEDIDO IRP 			
			WHERE IRP.ISN_PRODUTO = @ISN_PRO AND IRP.ISN_RESERVA_PEDIDO = @ISN_RES)
		BEGIN 
			INSERT INTO WMS_ITEM_RESERVAS_PEDIDO(ISN_RESERVA_PEDIDO, ISN_PRODUTO, IRPQT_QUANTIDADE)
			VALUES(@ISN_RES, @ISN_PRO, @QTD);
		END;
		--Próximo regitro da interação
		FETCH NEXT FROM cINTEGRACAO INTO @TAMCLN, @QTD	
	END
	--Finaliza o cursor
	CLOSE cINTEGRACAO;	
	DEALLOCATE cINTEGRACAO;
END
GO


